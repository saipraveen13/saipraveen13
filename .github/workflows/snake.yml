name: GitHub Audio Spectrum Animation
on:
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight UTC
  workflow_dispatch:      # Manual trigger
  push:
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Create dist directory
        run: mkdir -p dist

      - name: Install dependencies
        run: pip install requests pillow numpy

      - name: Create audio spectrum animation
        run: |
          cat > generate_audio_spectrum.py << 'EOF'
          import requests
          import math
          import random
          from PIL import Image, ImageDraw
          import os

          # Create dist directory if it doesn't exist
          os.makedirs('dist', exist_ok=True)

          # Get GitHub contributions data
          username = "${{ github.repository_owner }}"
          url = f"https://github.com/users/{username}/contributions"
          response = requests.get(url)
          data = response.text

          # Parse contributions
          contributions = []
          for line in data.split('\n'):
              if 'data-count=' in line and 'data-date=' in line:
                  try:
                      count_part = line.split('data-count="')[1]
                      count = int(count_part.split('"')[0])
                      date_part = line.split('data-date="')[1]
                      date = date_part.split('"')[0]
                      contributions.append((date, count))
                  except:
                      continue

          # If no contributions found, use some defaults
          if not contributions:
              contributions = [('2023-01-01', 5), ('2023-01-02', 3), ('2023-01-03', 8),
                              ('2023-01-04', 2), ('2023-01-05', 6), ('2023-01-06', 9)]

          # Create both dark and light versions
          backgrounds = [
              {'name': 'dark', 'bg_color': (13, 17, 23), 'text_color': (200, 200, 220), 'grid_color': (40, 40, 50)},
              {'name': 'light', 'bg_color': (255, 255, 255), 'text_color': (40, 40, 40), 'grid_color': (220, 220, 220)}
          ]

          for bg_style in backgrounds:
              width, height = 800, 400
              frames = 45
              gif_frames = []
              
              # Colors for different frequency bands (more vibrant)
              colors = [
                  (255, 80, 80),    # Red
                  (255, 160, 40),   # Orange
                  (255, 255, 60),   # Yellow
                  (60, 255, 60),    # Green
                  (60, 180, 255),   # Blue
                  (180, 60, 255),   # Purple
                  (255, 60, 180),   # Pink
              ]

              # Convert contributions to audio data
              audio_data = [min(15, count) for date, count in contributions[:80]]  # Limit to 80 points
              
              # Create frames
              for frame in range(frames):
                  img = Image.new('RGB', (width, height), color=bg_style['bg_color'])
                  draw = ImageDraw.Draw(img)
                  
                  # Draw background grid
                  for i in range(10):
                      y = i * (height // 10)
                      draw.line([(0, y), (width, y)], fill=bg_style['grid_color'], width=1)
                  
                  for i in range(16):
                      x = i * (width // 16)
                      draw.line([(x, 0), (x, height)], fill=bg_style['grid_color'], width=1)
                  
                  # Draw center line
                  draw.line([(0, height//2), (width, height//2)], fill=bg_style['grid_color'], width=2)
                  
                  # Create audio spectrum bars
                  time = frame * 0.15
                  bar_width = width // 32
                  
                  # Draw multiple frequency bands
                  for band in range(32):
                      # Different frequencies for each band
                      freq = 0.3 + band * 0.1
                      
                      # Base height modulation (sine wave)
                      base_height = math.sin(band * 0.2 + time) * 0.5 + 0.5
                      
                      # Add contribution-based modulation
                      data_idx = band % len(audio_data)
                      contribution_mod = audio_data[data_idx] / 15.0
                      
                      # Add some randomness
                      noise = random.uniform(0.8, 1.2)
                      
                      # Calculate final bar height
                      bar_height = int((base_height * contribution_mod * noise) * (height // 2 - 20))
                      
                      # Ensure bar height is within bounds
                      bar_height = max(5, min(bar_height, height//2 - 25))
                      
                      # Choose color based on band and height
                      color_idx = (band + frame) % len(colors)
                      color = colors[color_idx]
                      
                      # Draw the bar
                      x = band * bar_width + bar_width // 2
                      y_top = height // 2 - bar_height
                      y_bottom = height // 2 + bar_height
                      
                      # Ensure coordinates are within bounds
                      x1 = max(0, x - bar_width//2 + 2)
                      x2 = min(width, x + bar_width//2 - 2)
                      y1 = max(0, y_top)
                      y2 = min(height, y_bottom)
                      
                      # Draw the main bar
                      draw.rectangle([x1, y1, x2, y2], fill=color)
                      
                      # Add 3D effect with highlights
                      highlight_color = tuple(min(255, c + 40) for c in color)
                      draw.rectangle([x1, y1, min(width, x1 + 2), y2], fill=highlight_color)
                      
                      # Add glow effect at the top
                      if bar_height > 20:
                          glow_size = min(15, bar_height // 4)
                          for i in range(int(glow_size)):
                              radius = max(1, glow_size - i)
                              # Ensure coordinates are valid
                              x_start = max(0, x - radius)
                              y_start = max(0, y_top - radius)
                              x_end = min(width, x + radius)
                              y_end = min(height, y_top + radius)
                              
                              if x_start < x_end and y_start < y_end:  # Only draw if coordinates are valid
                                  alpha = 150 - (i * 150 // glow_size)
                                  glow_color = tuple(min(255, c + (alpha // 6)) for c in color)
                                  draw.ellipse([x_start, y_start, x_end, y_end], fill=glow_color)
                  
                  # Add floating frequency circles
                  for _ in range(15):
                      x = random.randint(0, width)
                      y = random.randint(0, height)
                      size = random.randint(2, 8)
                      color = random.choice(colors)
                      
                      # Ensure coordinates are valid
                      x1 = max(0, x - size)
                      y1 = max(0, y - size)
                      x2 = min(width, x + size)
                      y2 = min(height, y + size)
                      
                      if x1 < x2 and y1 < y2:  # Only draw if coordinates are valid
                          draw.ellipse([x1, y1, x2, y2], fill=color)
                  
                  # Add animated sound waves
                  for wave in range(3):
                      wave_radius = 20 + ((frame + wave*10) % 30) * 3
                      wave_center_x = random.randint(width//4, 3*width//4)
                      wave_center_y = random.randint(height//4, 3*height//4)
                      
                      for r in range(int(wave_radius), int(wave_radius) + 15, 3):
                          # Ensure coordinates are valid
                          x1 = max(0, wave_center_x - r)
                          y1 = max(0, wave_center_y - r)
                          x2 = min(width, wave_center_x + r)
                          y2 = min(height, wave_center_y + r)
                          
                          if x1 < x2 and y1 < y2:  # Only draw if coordinates are valid
                              alpha = 150 - (r - wave_radius) * 10
                              if alpha > 0:
                                  wave_color = colors[(wave + frame) % len(colors)]
                                  wave_color = tuple(int(c * alpha/150) for c in wave_color)
                                  draw.ellipse([x1, y1, x2, y2], outline=wave_color, width=1)
                  
                  # Add bouncing balls
                  for i in range(5):
                      ball_x = (width // 6) * (i + 1)
                      ball_y = height // 2 + math.sin(time + i) * (height // 4)
                      ball_size = 8 + i * 2
                      ball_color = colors[(i + frame) % len(colors)]
                      
                      # Ensure coordinates are valid
                      x1 = max(0, ball_x - ball_size)
                      y1 = max(0, ball_y - ball_size)
                      x2 = min(width, ball_x + ball_size)
                      y2 = min(height, ball_y + ball_size)
                      
                      if x1 < x2 and y1 < y2:  # Only draw if coordinates are valid
                          draw.ellipse([x1, y1, x2, y2], fill=ball_color)
                  
                  # Add title with contribution count
                  total_contributions = sum(count for date, count in contributions)
                  title = f"GitHub Audio Spectrum - {total_contributions} Contributions"
                  draw.text((width//2 - 180, 20), title, fill=bg_style['text_color'])
                  
                  # Add to frames
                  gif_frames.append(img)
              
              # Save as GIF
              if gif_frames:
                  gif_frames[0].save(
                      f'dist/github-audio-spectrum-{bg_style["name"]}.gif',
                      save_all=True,
                      append_images=gif_frames[1:],
                      duration=70,
                      loop=0,
                      optimize=True
                  )
                  print(f"{bg_style['name']} spectrum animation created successfully!")
              else:
                  print("No frames to save")
          EOF

          python generate_audio_spectrum.py

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: output
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Update audio spectrum animations [skip ci]"

      - name: Update README with Audio Spectrum Badge
        run: |
          # Add a badge to the README showing the latest animation
          echo "\n## 🎵 GitHub Audio Spectrum\n![GitHub Audio Spectrum](https://github.com/${{ github.repository }}/blob/output/github-audio-spectrum-dark.gif)" >> README.md
          echo "\n### Light Version\n![GitHub Audio Spectrum Light](https://github.com/${{ github.repository }}/blob/output/github-audio-spectrum-light.gif)" >> README.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Add audio spectrum animation badges to README" || echo "No changes to commit"
          git push
